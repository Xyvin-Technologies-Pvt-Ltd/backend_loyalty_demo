name: Loyalty Backend Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy-loyalty-backend:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: loyalty-backend-img
      CONTAINER_NAME: loyalty-backend-container
      ENV_FILE_PATH: /home/ubuntu/loyalty/.env/.env.production
      TMP_DIR: /home/ubuntu/tmp
      TAR_FILE: loyalty-backend-img.tar

    steps:
      # üì• Step 1: Checkout Source Code
      - name: Checkout code
        uses: actions/checkout@v3

      # üõ†Ô∏è Step 2: Build Docker image in runner
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

      # üì¶ Step 3: Save Docker image to .tar file
      - name: Save Docker image as tarball
        run: |
          docker save -o ${{ env.TAR_FILE }} ${{ env.IMAGE_NAME }}

      # üì§ Step 4: Upload Docker image tarball to server (/tmp)
      - name: Upload Docker image to server tmp dir
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "${{ env.TAR_FILE }}"
          target: "${{ env.TMP_DIR }}"

      # üöÄ Step 5: SSH into server, load Docker image, run container, clean tar
      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22

          script: |
            set -e

            echo "üìÅ Ensuring tmp directory exists..."
            mkdir -p ${{ env.TMP_DIR }}

            echo "üì¶ Loading Docker image from tarball..."
            sudo docker load -i ${{ env.TMP_DIR }}/${{ env.TAR_FILE }}

            echo "üßπ Stopping and removing old container (if exists)..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            echo "üìÑ Checking .env file..."
            if [ ! -f "${{ env.ENV_FILE_PATH }}" ]; then
              echo "‚ùå .env file not found at ${{ env.ENV_FILE_PATH }}"
              exit 1
            fi

            echo "üöÄ Running new container..."
            sudo docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --network myapp-network \
              --restart always \
              -p 3002:3002 \
              --env-file ${{ env.ENV_FILE_PATH }} \
              ${{ env.IMAGE_NAME }}

            echo "üßº Cleaning up tarball..."
            rm -f ${{ env.TMP_DIR }}/${{ env.TAR_FILE }}

            echo "‚úÖ Deployment complete!"
